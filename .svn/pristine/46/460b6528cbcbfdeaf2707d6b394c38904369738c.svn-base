import time

import pyodbc
from sqlalchemy.sql import text
from flask import Blueprint, render_template, redirect, url_for, session
from sqlalchemy import create_engine
from app.alertmanagement import AlertManager
import pandas as pd

alert_routes = Blueprint('alert_routes', __name__)

server = '172.25.57.117'
database = 'FRMS_AI'
username = 'sa'
password = 'P@ss1234'
Driver = '{SQL Server Native Client 11.0}'
engine = create_engine(
    f'mssql+pyodbc:///?odbc_connect=DRIVER={Driver};SERVER={server};DATABASE={database};UID={username};PWD={password}'
)

def inAlert(alertdata,typeOfEntry):

    connection_string = "DRIVER={SQL Server};SERVER=" + server + ";DATABASE=" + database + ";UID=" + username + ";PWD=" + password
    print(alertdata)
    with pyodbc.connect(connection_string) as conn:
        if typeOfEntry == 'personal':
            cursor = conn.cursor()
            cursor.execute(f"SELECT id FROM UserMaster WHERE UserName = ?", alertdata['to_whom'])

            # Fetching all the results
            results = cursor.fetchall()

            # Extracting the ids into a list
            id_list = [row[0] for row in results]
            conn.execute(
                "INSERT INTO AlertConfig VALUES (?, ?, ?, ?, 0, ?, ?)",
                int(time.time()), alertdata['AlertCategory'], alertdata['NavLink'], alertdata['Description'],
                str(id_list), alertdata['ObjId']
            )
        if typeOfEntry == 'group':
            cursor = conn.cursor()

            # Executing the SQL query
            cursor.execute(f"SELECT id FROM UserMaster WHERE roleID = {alertdata['to_whom']}")

            # Fetching all the results
            results = cursor.fetchall()

            # Extracting the ids into a list
            id_list = [row[0] for row in results]

            conn.execute(
                "INSERT INTO AlertConfig VALUES (?, ?, ?, ?, 0, ?, ?)",
                int(time.time()), alertdata['AlertCategory'], alertdata['NavLink'], alertdata['Description'],
                str(id_list), alertdata['ObjId']
            )


@alert_routes.route('/alerts', methods=['GET'])
def alerts():
    username = session.get('username')
    userdetails = session.get('userdetails')

    if not username:
        return redirect(url_for('LoginPage'))
    alert_manager = AlertManager(engine,username,userdetails.get('Role'))
    alerts_data = alert_manager.get_alerts_for_user()
    alerts_list = alerts_data.to_dict('records')

    return render_template('alerts.html', alertsk=alerts_list, user=username)
