from flask import Blueprint, render_template, request, redirect, url_for, session
from app.RuleManagement import RuleManager
import pandas as pd
from app.alert_route import inAlert,upAlert

global role_manager
rule_manager = RuleManager(None, pd.read_csv('app/rules.csv'), pd.read_csv('app/delRules.csv'))

rules_watchlist_routes = Blueprint('rules_watchlist_routes', __name__)


@rules_watchlist_routes.route('/rules_watchlist/rules', defaults={'subpath': ''}, methods=['GET', 'POST'])
@rules_watchlist_routes.route('/rules_watchlist/rules/<path:subpath>', methods=['GET', 'POST'])
def rules(subpath):
    userdetails=session.get('userdetails')
    username = session.get('username')
    if not username:
        return redirect(url_for('LoginPage'))  # Redirect to login if session is not set

    if request.method == 'POST' and subpath == '':
        # Handle form submission to create rule
        column = request.form['column']
        operator = request.form['operator']
        value = request.form['value']
        allpre = request.form['allpre']
        channel = request.form['channel']

        # Handle rule creation and validation
        message = rule_manager.create_rule(channel, column, operator, value, allpre, username)
        if type(message) is not int:

            return render_template('rules.html', rules=rule_manager.df.to_dict('records'), user=username,
                                   userdetails=userdetails,message=message)


        inAlert({'AlertCategory': 'rule_Addition', 'NavLink': '/rules_watchlist/rules/pending',
                 'Description': 'Maker added the rule', 'is_seen': 0,
                 'to_whom': 3,
                 'ObjId': message},'group')

    if subpath == 'pending':
        objid = None
        if request.method == 'POST':
            objid = int(request.form['objid'])
            upAlert(int(request.form['altid']))
        rules_data = rule_manager.df
        pending_rules_data=rules_data[rules_data['appAction']=='Pending'].to_dict('records')
        return render_template('rules.html', rules=pending_rules_data,userdetails=userdetails, user=username ,action=subpath,objid=objid)
    elif subpath == 'declined' :
        objid = None
        if request.method == 'POST':
            objid = int(request.form['objid'])
            upAlert(int(request.form['altid']))
        rules_data = rule_manager.df
        Approved_rules_data = rules_data[rules_data['appAction'] == 'Declined'].to_dict('records')
        return render_template('rules.html', rules=Approved_rules_data,userdetails=userdetails, user=username,action=subpath,objid=objid)
    elif subpath == '' :
        # Handle the default rules page
        rules_data = rule_manager.df
        Approved_rules_data = rules_data[rules_data['appAction'] == 'Approved'].to_dict('records')
        return render_template('rules.html', rules=Approved_rules_data,userdetails=userdetails, user=username,action=subpath)



@rules_watchlist_routes.route('/rules_watchlist/update/<int:rule_id>', methods=['POST'])
def update_rule(rule_id):
    # Handle updating rule
    username = session.get('username')
    if not username:
        return redirect(url_for('LoginPage'))
    if 'action' in request.form and request.form['action'] == 'approved':
        rule_manager.update_rule(rule_id=rule_id,appstatus= 'Approved',modified_by=username,ActionTookby=username)
        return redirect(url_for('rules_watchlist_routes.rules',  subpath='pending',user=username))
    if 'action' in request.form and request.form['action'] == 'RequestAgain':
        rule_manager.update_rule(rule_id=rule_id,appstatus= 'Pending',ActionTookby='',modified_by=username,)
        return redirect(url_for('rules_watchlist_routes.rules',  subpath='declined',user=username))
    elif 'action' in request.form and request.form['action'] == 'declined':
        rule_manager.update_rule(rule_id=rule_id, appstatus='Declined' ,modified_by=username,ActionTookby=username)
        inAlert({'AlertCategory': 'rule_declined', 'NavLink': '/rules_watchlist/rules/declined',
                 'Description': 'Approver declined the rule', 'is_seen': 0,
                 'to_whom': rule_manager.df[rule_manager.df['id'] == rule_id]['created_by'].values[0],
                 'ObjId': rule_id},'personal')
        return redirect(url_for('rules_watchlist_routes.rules', subpath='pending', user=username))
    elif 'action' in request.form and request.form['action'] == 'reupdate':
        channel = request.form['channel']
        column = request.form['column']
        operator = request.form['operator']
        value = request.form['value']
        rule_manager.update_rule(rule_id, channel, column, operator, value, username)
        return redirect(url_for('rules_watchlist_routes.rules', subpath='declined', user=username))
    else:
        channel = request.form['channel']
        column = request.form['column']
        operator = request.form['operator']
        value = request.form['value']



        rule_manager.update_rule(rule_id, channel, column, operator, value, username)
        return redirect(url_for('rules_watchlist_routes.rules', user=username))


@rules_watchlist_routes.route('/rules_watchlist/delete/<int:rule_id>', methods=['POST'])
def delete_rule(rule_id):
    # Handle deleting rule
    username = session.get('username')
    if not username:
        return redirect(url_for('LoginPage'))  # Redirect to login if session is not set
    rule_manager.delete_rule(rule_id, username)
    if 'action' in request.form and request.form['action'] == 'declined':
        return redirect(url_for('rules_watchlist_routes.rules',  subpath='declined',user=username))
    if 'action' in request.form and request.form['action'] == 'pending':
        return redirect(url_for('rules_watchlist_routes.rules',  subpath='pending',user=username))
    return redirect(url_for('rules_watchlist_routes.rules', user=username))


@rules_watchlist_routes.route('/rules_watchlist/toggle/<int:rule_id>', methods=['POST'])
def toggle_rule(rule_id):
    # Handle toggling rule status
    rule_manager.toggle_rule_status(rule_id)
    return redirect(url_for('rules_watchlist_routes.rules'))

# You can define other routes related to rules and watchlist similarly
